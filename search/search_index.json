{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ml-cat-project","text":"<p>A small toy project aiming to recognize cats on pictures.</p>"},{"location":"modules/","title":"Modules","text":""},{"location":"modules/#ml_cat_project.src.model.SimpleNN","title":"<code>SimpleNN</code>","text":"<p>               Bases: <code>Module</code></p> <p>Simple neural network using a pretrained ResNet18 backbone. Designed for 2-class classification: cat vs not-cat.</p> Source code in <code>ml_cat_project/src/model.py</code> <pre><code>class SimpleNN(nn.Module):\n    \"\"\"\n    Simple neural network using a pretrained ResNet18 backbone.\n    Designed for 2-class classification: cat vs not-cat.\n    \"\"\"\n\n    def __init__(self, num_classes: int = 2):\n        super().__init__()\n        # Load ResNet18 backbone\n        self.backbone = models.resnet18()\n        # Replace the final fully connected layer\n        self.backbone.fc = nn.Linear(self.backbone.fc.in_features, num_classes)\n\n    def forward(self, x: torch.Tensor) -&gt; Any:\n        return self.backbone(x)\n</code></pre>"}]}